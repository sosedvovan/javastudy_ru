В проекте присутствуют:

web.xml — дескриптор развертывания. Базовый файл настроек для Java веб приложения.
mvc-config.xml, application-context.xml — конфигурационные файлы Spring MVC.
пакет view — здесь будут находиться все представления, которые будут использоваться в проекте.
пакет resources — здесь будут находиться различные статические ресурсы (css стили, шрифты и т.п.).
pom.xml — главный файл maven. Здесь подключаются зависимости для различных библиотек.
В Idea создаем пустой maven проект. Ничего внутри выбирать не нужно и просто жмем везде далее.
Разумеется задаете имя и местонахождение своего проекта. После этого в структуре появится pom.xml файл,
в который мы будем добавлять зависимости.

делаем помник

Нажимаем правой кнопкой на проект и выбираем Add Framework Support...
Далее выбираем Web Application Spring. Если в maven зависимость подгрузилась,
то идея укажет на нее в поле справа. На самом деле от того, что вы выберите зависит
какие xml файлы автоматически будут добавлены в проект. В целом это можно сделать и
руками, но так гораздо удобнее и потом идея подхватит их и будет удобно
навигироваться. В нашем случае будут добавлены файлы конфигурации
спринг и web.xml файл.

делаем web.xml
Java веб-приложения используют файл дескриптора развертывания для определения какие
URL будут передаваться определенному сервлету, какие URL требуют аутентификации и др.
Этот дескриптор развертывания называется web.xml и находится в WAR приложения в
WEB-INF/ директории. Web.xml — часть стандарта сервлета для веб-приложений.
Дескриптор развертывания веб-приложений описывает классы, ресурсы и конфигурацию
приложения, а так же как сервер будет использовать их для выполнения веб-запросов.
Когда сервер получает запрос для приложения, он использует дескриптор развертывания
для отображения URL запроса к коду, который должен этот запрос обработать.
web.xml определяет соответствие между путями URL и сервлетами, которые эти URL будут
обрабатывать. Веб-сервер использует эту конфигурацию, чтоб определить сервлет для
обработки данного запроса и вызвать метод класса, который соответствует методу
запроса (например метод doGet() для HTTP.GET запросов).

Для привязки («маппинг») URL к сервлету, необходимо определить элементы
<servlet> и <servlet-mapping>.
Элемент <servlet-mapping> определяет шаблон URL и имя сервлета, который будет
обрабатывать запросы, соответствующие шаблону. Шаблон должен содержать полный
путь URL, включая (/), следующий за именем домена.
 <servlet>
        <servlet-name>blueteam</servlet-name>
        <servlet-class>mysite.server.TeamServlet</servlet-class>
        <init-param>
            <param-name>teamColor</param-name>
            <param-value>blue</param-value>
        </init-param>
        <init-param>
            <param-name>bgColor</param-name>
            <param-value>#0000CC</param-value>
        </init-param>
    </servlet>

 <servlet-mapping>
        <servlet-name>blueteam</servlet-name>
        <url-pattern>/blue/*</url-pattern>
 </servlet-mapping>
 В этом примере запрос с URL http://www.example.com/blue/teamProfile будет перехвачен классом сервлета
 TeamServlet с параметром teamColor=blue и bgColor=#0000CC.




 4. Подключение Bootstrap
 В нашем проекте мы будем использовать популярный фреймворк Bootstrap 3.3.6.
 Существует способ подключения bootstrap с помощью jar зависимости в maven.
 Вы можете перейти на сайт webjars.org и посмотреть как это сделать. В этом
 проекте используется более хардкорный метод — скачивание ресурсов и копирование
 в соответствующие пакеты.

 4.1. Зависимости bootstrap
 На сайте проекта bootstrap необходимо скачать как минимум: bootstrap.css,
 bootstrap.js. Здесь были добавлены еще несколько js и css файлов
 (версии min — т.е. сжатые). Вы можете скопировать их в свой проект в
 соответствующие каталоги (resources/css, js, fonts и т.д.).

 4.2 Подключение шаблона темы bootstrap
 В этом проекте был использован бесплатный шаблон на основе
 bootstrap — startbootstrap-modern-business-1.0.5. К достоинствам jsp
 относится его полная совместимость в html. Поэтому вы можете просто открыть
 index.html из темы шаблона и скопировать его содержимое к вам в jsp файл
 (но нужно оставить базовые настройки jsp файла, которые находятся в начале файла!).
 Так и было сделано здесь со страницами index.jsp и about.jsp.


 5. Создание jsp представления.
 Обратите внимание, что в структуре этой части проекта файл index.jsp лежит внутри
 WEB-INF, т.е. он не доступен по прямой ссылке из браузера. Страница будет
 загружаться, т.к. на нее будет настроена переадресация из welcome-file-list внутри
 web.xml. В дальнейшем эта страница перекочует в корень веб проекта.
 Ниже приведена обязательная часть для jsp страницы, остальной код был
 скопирован из index.html шаблона.

 <!DOCTYPE html>

 <%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
 <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
 <%@ taglib prefix="spring" uri="http://www.springframework.org/tags"%>

 <html>
   <head>
     <title>Javastudy.ru MVC_HTML5_Angular</title>
     <spring:url value="resources/css/bootstrap.css" var="bootstrap"/>
     <spring:url value="/resources/css/modern-business.css" var="startertemplate"/>
     <link href="${bootstrap}" rel="stylesheet" />
     <link href="${startertemplate}" rel="stylesheet" />
   </head>

   Здесь прописаны пространства имен, а также указаны пути к файлам стилей и
   javascript файла фреймворка bootstrap.

   6. Запуск приложения
   Далее вам необходимо настроить веб сервер. Например можно использовать Tomcat.
   Все настройки были оставлены по умолчанию и добавлен :exploded архив приложения.
   После запуска увидим страницу нашего приложения с подключенными
   стилями bootstrap.