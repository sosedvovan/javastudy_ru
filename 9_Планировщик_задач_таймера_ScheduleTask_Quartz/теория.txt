Планировщик задач и использование таймера в Spring MVC на примере ScheduleTask и Quartz.
Планировщик задач и использование таймера в Spring MVC на примере ScheduleTask и Quartz.

Обзор приложения Spring MVC + AngularJS + Bootstrap + HTML5
Используемые технологии и библиотеки
Spring MVC 4.2.4.Release
Quartz Scheduler 2.2.1
Maven 3.2.5
IntelliJ IDEA 15.0.2
1. Описание задачи
Настроить приложение Spring MVC на выполнение запланированных задач по графику.
Для этой цели мы будем использовать встроенную поддержку планировщика задач в
Spring — Quartz Scheduler. Рассмотрим как запускать задачу по триггеру
(по интервалу времени или выражению cron), а так же применение аннотаций
для планирования задач.
В проекте используются три класса для демонстрации различных видов планирования
и выполнения задач: ScheduleTask — использует аннотацию @Scheduled для
планирования задачи, QuartzTask и CronQuartzTask — два разных класса,
которые показывают возможность выполнения задач по простому триггеру и
с помощью выражения cron.


web.xml, spring config и др ml
не поменялись относительно предыдущих глав.???

5. Описание Quartz, Cron
Сначала о Quartz и в чем смысл его использования. Quartz — это библиотека с открытым исходным
кодом, которая может быть встроена в любое Java приложение. С помощью нее можно планировать
и выполнять сотни задач.
Библиотека поддерживает много фич из enterprise технологий.

Cron — демон-планировщик заданий в Unix-подобных операционных системах, использующийся для
периодического выполнения заданий в определённое время. Выражения cron имеют вид ‘ * * * * * ? ‘
(minutes, hours, day of month, month, day of week, year(optional) ).

Более подробную информацию о выражения cron можно найти в интернете, для нас же будет важно
понимание следующего:

* — выбирает все величины. То есть на месте позиции часа символ * означает, что задание
будет выполняться каждый час;

? — незначащая величина;

, — отделяет дополнительные величины. Например, триггер “0 0 11,12 * * ?” будет срабатывать
в 11 и 12 часов;

/ — определяет инкремент величины. Например, “0 0 0/2 * * ?” означает, что триггер будет
срабатывать каждые 2 часа.

Сравнение Cron и Quartz
Использование cron подразумевает подключение еще одной точки входа в приложение,
в то время как Quartz уже встроен в него. Для Quartz появляется много возможностей
внутренней коммуникации в приложении, а для cron всё сложнее. Quartz можно запустить в
многопоточной среде без особых сложностей.
cron зависит от платформы, Quartz — нет.
Quartz позволяет гарантировать запуск задач после прошедшего времени вызова (например если
сервер в нужное время лежал, то задача всё равно запуститься при восстановлении работы).
В то время как чистый cron это не гарантирует (если не настроено вручную).
Quartz поддерживает более гибкие выражения и настройки.
Quartz позволяет работать в многопоточном режиме, что добавляет множество возможностей.
Если вы используете cron из ОС, то при изменении состоянии jvm любое состояние cron может
быть потеряно.
С Quartz вы получаете возможность портирования (например на Win OS где cron недоступен).
Возможность администрирования состояния Quartz (например на Tomcat можно смотреть что там
происходит с планировщиком).


6. Описание классов и настроек
@Scheduled
Самый простой способ настройки планировщика задач — использование в
классе аннотации @Scheduled.