<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/mvc
	   http://www.springframework.org/schema/mvc/spring-mvc.xsd
	   http://www.springframework.org/schema/context
	   http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd">

<!--    включает поиск классов с аннотациями, вроде @Component
по указанным пакетам.-->
    <!-- context:component-scan This tag will scan @Component, @Repository, @Service, @Controller
         and also resolves @Autowired and @Qualifier -->
    <context:component-scan base-package="ru.javastudy.mvcHtml5Angular.mvc" />

    <!--«включит» наши @Component бины
        mvc:annotation-driven configures Spring MVC annotations
        Support for validating @Controller inputs with @Valid, if a JSR-303 Provider is present on the classpath.
        HttpMessageConverter support for @RequestBody method parameters and @ResponseBody method return values
        from @RequestMapping or @ExceptionHandler methods.
     -->
    <mvc:annotation-driven/>


    <!--    Без нее аннотация @Transactional работать не будет в хибернете
    +добавили в пространство имен <tx...-->
    <!-- activate @Transactional JPA annotation -->
    <tx:annotation-driven/>

    <!--org.springframework.web.servlet.PageNotFound.noHandlerFound No mapping found
    for HTTP request with URI [/jdbcUpdate/user/username/user@javastudy.ru/enabled/resources/css/bootstrap.css]
     in DispatcherServlet with name 'dispatcherServlet'-->
    <!--<mvc:default-servlet-handler/>-->


<!--    используется при возврате модели из спринг бина.-->
    <!-- ViewResolver bean config for mapping strings to jsp views -->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <!-- Example: a logical view name of 'showMessage' is mapped to '/WEB-INF/jsp/showMessage.jsp' -->
        <property name="order" value="1" />
        <property name="prefix" value="/WEB-INF/view" />
        <property name="suffix" value=".jsp" />
    </bean>

<!--    Для загрузки файлов нам понадобится прописать в mvc-config.xml
интерфейс MultipartResolver. Для создания pdf, excel документов был
добавлен отдельный xml конфигурационный файл и с помощью
XmlViewResolver был подключен к конфигурации спринг:
 <mvc:view-controller path="/file.html" view-name="/file/file"/>-->
    <!-- File Upload bean config-->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <!-- set the maximum file size in bytes -->
        <property name="maxUploadSize" value="1000000"/>
    </bean>

    <!--Excel and PDF xml view configuration -->
    <bean class="org.springframework.web.servlet.view.XmlViewResolver">
        <property name="order" value="0" />
        <property name="location">
            <value>/WEB-INF/config/excel-pdf-config.xml</value>
        </property>
    </bean>

<!--view-controller используется в связке с viewResolver
тк мы исп шаблон бутстрвпа а внутри его страниц ссылки с .html и мы их
переделываем на .jsp-->
<!--    view-controller — с помощью viewResolver перенаправит пользователя
перешедшего по ссылке в представление.
Например для http://localhost:8080/about.html произойдет такой поиск —
к префиксу добавится указанный view-name и добавиться суффикс.
Т.е. http://localhost:8080/контекст если он задан/WEB-INF/view/about/about.jsp.-->
    <mvc:view-controller path="/about.html" view-name="/about/about"/>
    <mvc:view-controller path="/index.html" view-name="/index"/>
    <mvc:view-controller path="/file.html" view-name="/file/file"/>
    <mvc:view-controller path="/jdbc.html" view-name="/jdbc/jdbc"/>
    <mvc:view-controller path="/email.html" view-name="/email/email"/>
    <mvc:view-controller path="/rest.html" view-name="/rest/rest"/>
    <mvc:view-controller path="/orm.html" view-name="/orm/orm"/>
    <mvc:view-controller path="/exception.html" view-name="/error/exception"/>
    <mvc:view-controller path="/jstl.html" view-name="/jstl/jstl"/>

    <!-- Static Resources Configuration (get access to static sources such as CSS and JavaScript files) -->
    <mvc:resources mapping="/resources/**" location="/resources/" />
    <!-- themes can be put in different folder such as
        <mvc:resources mapping="/resources/**" location="/resources/themeBlue" />
        <mvc:resources mapping="/resources/**" location="/resources/themeGreen" />
     -->

</beans>