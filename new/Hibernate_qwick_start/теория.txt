https://javastudy.ru/hibernate/hibernate-quick-start/
Hibernate — быстрый старт. Пример приложения Hibernate 5 Hello World
Java Hibernate — настройка, подключение к БД и создание простого приложения
Hibernate — один из самых популярных фреймворков для Java, выполняющая объектно-реляционное
отображение (object-relational mapping — ORM). Этот фреймворк значительно сокращает время на
реализацию задач отображения данных из таблиц в классы (POJO).

Используемые технологии:
Hibernate 5.0.1.Final

Maven 3.2.5

IntelliJ IDEA 14

MySQL 5.6.25

1. Описание задачи
Необходимо создать пустой проект maven, подключить к нему фреймворк Hibernate.
Затем подключиться к базе данных и записать в таблицу данные.

5. Подключение фреймворка Hibernate в проект
В Idea нажимаем на проект, дальше Add Framework Support… и там выбираем Hibernate.
Если у вас подгрузились зависимости, указанные выше, то будет доступен выбор из зависимостей maven.
Так же можно установить галочку Import database schema о настройке схемы базы данных (БД) сразу
после нажатия на ок. Я покажу эту настройку отдельно.

6. Создание файла настроек фрейморка hibernate.cfg.xml
Теперь нам нужно создать главный файл настроек Hibernate.
Сделать это можно несколькими способами, вот один из них:
В настройках проекта (ctrl+alt+shift+s) в фасетах выбираем хибернейт и дальше справа +. Указываем путь
где будет храниться этот файл и жмем ок.

Листинг уже с настройками показан ниже. Обратите внимание, что после автоматической генерации
сущностей свойства имя пользователя и пароль
перезаписываются (или вообще удаляются). Так что здесь приведен уже конечный файл:

8. Создание сущностей (POJO-классы) для колонок из базы данных

КАК ОПИСАННО НЕ РАБОТАЛО. Я СДЕЛАЛ АНАЛОГИЧНО ИЗ ВКЛАДКИ: JPA Structure

После того как мы подключились к БД можно сгенерировать сущности
автоматически. Для этого в IDEA можно выбрать пункт Generate Persistence Mapping — By Database Schema.
Далее появится такое окошко. Прописываем схему базы данных, куда будут складываться классы,
а также префикс и суффикс к сгенерированным названиям. В моем случае я выбрал суффикс Entity
и поэтому колонка contact будет замапина в класс ContactEntity.
Выбираем какие настройки будут сгенерированы и жмем ок. Хоть на скриншоте и выбраны все галочки,
но в итоге я удалил xml, которые были сгенерированы (Generate Separate XML per Entity —
для каждой сущности будут сгенерирован свой xml файл) и оставил только классы с аннотациями
(наиболее удобный и распространенный вариант, хотя вариант с xml имеет свои достоинства)
